package com.cog.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cog.dto.ResponseDto;
import com.cog.dto.UserDto;
import com.cog.jwt.JwtUtils;
import com.cog.service.UserDetailsImpl;
import com.cog.service.UserServiceImpl;

@RestController
@RequestMapping("/api/v1/digitalbooks/author")
@CrossOrigin
public class UserController {
	@Autowired
	UserServiceImpl userService;
	
	@Autowired
	AuthenticationManager authenticationManager;
	
	@Autowired
	JwtUtils jwtUtils;

	@PostMapping(path = "/signup", consumes = "application/json", produces = "application/json")
	ResponseDto createUser(@Valid @RequestBody UserDto userDto) {
		return userService.saveUser(userDto);
	}
	
	@PostMapping(path = "/login", consumes = "application/json", produces = "application/json")
	ResponseDto loginUser(@Valid @RequestBody UserDto userDto) {
		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(userDto.getEmailId(), userDto.getPassword()));

		SecurityContextHolder.getContext().setAuthentication(authentication);
		String jwt = jwtUtils.generateJwtToken(authentication);
		
		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();		
		List<String> roles = userDetails.getAuthorities().stream()
				.map(item -> item.getAuthority())
				.collect(Collectors.toList());

		return ResponseEntity.ok(new JwtResponse(jwt, 
												 userDetails.getId(), 
												 userDetails.getUsername(), 
												 userDetails.getEmail(), 
												 roles));
	}

}
