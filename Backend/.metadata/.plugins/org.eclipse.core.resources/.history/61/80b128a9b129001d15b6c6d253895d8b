package com.cog.service;

import java.time.LocalDateTime;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.cog.dao.UserRepository;
import com.cog.dto.ResponseDto;
import com.cog.dto.UserDto;
import com.cog.entity.User;
import com.cog.entity.UserMapping;
import com.cog.enums.Event;
import com.cog.util.Constant;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private PasswordEncoder bcryptEncoder;

	@Autowired
	private UserMappingService userMappingService;

	public ResponseDto saveUser(UserDto userDto) {
		ResponseDto res = new ResponseDto();
		// only Author role people required sign up
		if (userDto.getRole().equals(Constant.ROLE_AUTHOR)) {
			User user = setUserData(userDto);

			res.setResponse(Constant.USER_REGISTER_ERROR);
			// if user not found in db
			if (userRepository.findByEmailId(userDto.getEmailId()) == null) {
				if (userRepository.save(user).getId() != null) {
					res.setResponse(Constant.USER_REGISTER_SUCCESS);
				}
			}
		}
		return res;
	}

	private User setUserData(UserDto userDto) {
		User user = new User();
		user.setEmailId(userDto.getEmailId());
		user.setFirstName(userDto.getFirstName());
		user.setLastName(userDto.getLastName());
		user.setPassword(bcryptEncoder.encode(userDto.getPassword()));
		user.setRegisteredDate(LocalDateTime.now());
		user.setStatus(Event.ACTIVE);

		return user;
	}

	@Override

	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		User user = userRepository.findByEmailId(username)
				.orElseThrow(() -> new UsernameNotFoundException("User Not Found with username: " + username));
		Set<UserMapping> userMappings = userMappingService.findByUserId(user.getId());
		return UserDetailsImpl.build(user, userMappings);
	}

}
