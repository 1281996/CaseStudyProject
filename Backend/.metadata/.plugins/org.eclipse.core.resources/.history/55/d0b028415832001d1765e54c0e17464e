package com.cog.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;

import org.apache.catalina.connector.Response;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.cog.entity.Book;
import com.cog.entity.Payment;
import com.cog.service.BookService;

@ExtendWith(MockitoExtension.class)
class ReaderControllerTest {
	@Mock
	BookService bookService;
	@InjectMocks
	ReaderController readerController;

	@Test
	void testGetReaderBooks() {
		when(bookService.getReaderBooks()).thenReturn(new ArrayList<>());
		assertEquals(0, readerController.getReaderBooks().size());
	}
	@Test
	void testGetPurchasedBooks(){
		List<Payment> payments=new ArrayList<>();
		payments.add(getPayment());
		when(bookService.getPurchasedBooks("")).thenReturn(payments);
		assertEquals(1, readerController.getPurchasedBooks("kamma.mallika@gmail.com").size());
	}
	@Test
	void testExportBookContentToPDF() {
		HttpServletResponse response=new Response();
	}
	Payment getPayment() {
		Payment payment=new Payment();
		payment.setBook(new Book());
		payment.setCardNumber(12345L);
		payment.setCvc(234L);
		payment.setEmail("kamma.mallika@gmail.com");
		payment.setId(1);
		payment.setName("mallika");
		payment.setPaymentDate(LocalDateTime.now());
		payment.setPaymentType("Card");
		payment.setRefundStatus(true);
		return payment;
	}
}
