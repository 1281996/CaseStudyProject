package com.cog.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.cog.dto.BookDto;
import com.cog.dto.ResponseDto;
import com.cog.dto.UserDto;
import com.cog.entity.Role;
import com.cog.entity.User;
import com.cog.service.BookService;
import com.cog.service.UserDetailsServiceImpl;
import com.cog.util.Constant;
@ExtendWith(MockitoExtension.class)
class AuthorControllerTest {
	@Mock
	UserDetailsServiceImpl userService;

	@Mock
	BookService bookService;
	@InjectMocks
	AuthorController authorController;

	@Test
	void testCreateUser() {
	UserDto dto	=getUserDto();
		when(userService.saveUser(dto)).thenReturn(new ResponseDto(Constant.USER_REGISTER_SUCCESS));
	assertEquals(Constant.USER_REGISTER_SUCCESS, authorController.createUser(dto).getResponse());
	}

	@Test
	void testLoginUser() {
		fail("Not yet implemented");
	}

	@Test
	void testCreateBook() {
		fail("Not yet implemented");
	}

	@Test
	void testUpdateBook() {
		fail("Not yet implemented");
	}

	@Test
	void testGetAllMyBooks() {
		fail("Not yet implemented");
	}
	public static BookDto getBookDto() {

		BookDto book = new BookDto();
		book.setCategory("Fictional");
		book.setContent("...");
		book.setId(1);
		book.setImage("assests/img.jpg");
		book.setPrice(250.0);
		book.setPublisher("Rupa");
		book.setReleasedDate(LocalDateTime.now());
		book.setRole(new Role());
		book.setStatus("Active");
		book.setTitle("Harry Poter");
		book.setUser(new User());

		return book;
	}
	public static UserDto getUserDto() {
		UserDto userDto = new UserDto();
		userDto.setEmailId("kamma.mallika@gmail.com");
		userDto.setFirstName("kamma");
		userDto.setLastName("mallika");
		userDto.setPassword("mkllll");
		userDto.setRole(Constant.ROLE_AUTHOR);
		return userDto;
	}
}
